trigger OpportunityTrigger on Opportunity (Before insert,Before Update,After Insert,After Update,After Delete,After Undelete) {
	
    if(Trigger.isBefore){
        if(Trigger.isInsert){
                
        }
        if(Trigger.isUpdate){
            if(OpportunityTriggerHandler.isTriggerRan == false){
               // OpportunityTriggerHandler.updateEmailId(Trigger.New,Trigger.oldMap);
            }
        }
    }
    
    if(Trigger.isAfter){
        if(Trigger.isInsert){
            //OpportunityTriggerHandler.makeAccountRatingHot(Trigger.New,null); 
            OpportunityTriggerHandler.maxOpportunityOnAccount(trigger.new,null);
        }
        if(Trigger.isUpdate){
            //OpportunityTriggerHandler.makeAccountRatingHot(Trigger.New,Trigger.oldMap);
		OpportunityTriggerHandler.maxOpportunityOnAccount(trigger.new,Trigger.oldMap);            
        }
        if(Trigger.isDelete){
            OpportunityTriggerHandler.maxOpportunityOnAccount(trigger.old,null);            
        }
        if(Trigger.isUndelete){
            OpportunityTriggerHandler.maxOpportunityOnAccount(trigger.new,null);            
        }
    }
    
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
public class OpportunityTriggerHandler {
    //I have 1 account for that I have 5 related opportunities  1 opportunity is updated with email id then
    // I want to update on the all the opportunity of that account
    // 
    public static Boolean isTriggerRan = false;
    public static void updateEmailId(List<Opportunity> newOppList,Map<Id,Opportunity> oldOppMap){
        
        
        Map<Id,String> accIdOppMailMap = new Map<Id,String>();
        Set<Id> oppId = new Set<Id>();
        for(Opportunity opp : newOppList){
            if(opp.AccountId != null && opp.Email__c != oldOppMap.get(opp.Id).Email__c){
                accIdOppMailMap.put(opp.AccountId,opp.Email__c);
                oppId.add(opp.Id);
            }
        }
        
        List<Opportunity> oppToBeUpdated = new List<Opportunity>();
        
        for(Opportunity opp : [SELECT AccountId,Id,Email__c FROM Opportunity WHERE AccountId IN :accIdOppMailMap.keySet() AND Id NOT IN :oppId]){
            opp.Email__c = accIdOppMailMap.get(opp.AccountId);
            
            oppToBeUpdated.add(opp);
        }
        isTriggerRan = true;
        update oppToBeUpdated;
        isTriggerRan = false;
    }
    
    //When an Opportunity with StageName "closed won" inserted or updated to "closed won" mark their related account 
    //rating as hot only if they have 3+ Opportunities with stagename "closed won"
    
    /*public static void makeAccountRatingHot(List<Opportunity> newOppList,Map<Id,Opportunity> oldOppMap){
        
        List<Account> accToBeUpdated = new List<Account>();
        Set<Id> accIds = new Set<Id>();
        
        if(newOppList != null && oldOppMap == null){
            for(Opportunity opp : newOppList){
                if(opp.AccountId != null && opp.StageName == 'Closed Won'){
                    accIds.add(opp.AccountId);
                }
            }
        }
        
        if(newOppList != null && oldOppMap != null){
            for(Opportunity opp : newOppList){
                if(opp.AccountId != null && opp.StageName == 'Closed Won' && oldOppMap.get(opp.Id).StageName != 'Closed Won' ){
                    accIds.add(opp.AccountId);
                }
            }
        }
        
        if(accIds.isEmpty()){
            return;
        }
        
        for(Account acc : [SELECT Id,Rating,(SELECT Id,StageName FROM Opportunities WHERE StageName = 'Closed Won')
                           FROM Account WHERE Id IN :accIds]){
                               if(acc.Opportunities.size() > 3 ){
                                   acc.Rating = 'Hot';
                                   
                                   accToBeUpdated.add(acc);
                               }
                           }
        
        if(!accToBeUpdated.isEmpty()){
            update accToBeUpdated;
        }
    }*/
    
    public static void makeAccountRatingHot(List<Opportunity> newOppList,Map<Id,Opportunity> oldOppMap){
        
        List<Account> accToBeUpdated = new List<Account>();
        Set<Id> accIds = new Set<Id>();
        
        
            for(Opportunity opp : newOppList){
                if(oldOppMap == null && opp.AccountId != null && opp.StageName == 'Closed Won'){
                    accIds.add(opp.AccountId);
                }
                else if(oldOppMap != null && opp.AccountId != null && opp.StageName == 'Closed Won' && oldOppMap.get(opp.Id).StageName != 'Closed Won' ){
                    accIds.add(opp.AccountId);
                }
            }
        
        
        
        if(!accIds.isEmpty()){
            for(Account acc : [SELECT Id,Rating,(SELECT Id,StageName FROM Opportunities WHERE StageName = 'Closed Won')
                               FROM Account WHERE Id IN :accIds]){
                                   if(acc.Opportunities.size() > 3 ){
                                       acc.Rating = 'Hot';
                                       
                                       accToBeUpdated.add(acc);
                                   }
                               }
            
            if(!accToBeUpdated.isEmpty())
                update accToBeUpdated;
        }
        
    }
    
    //Write trigger where Opportunity have Amount so the maximum Amount Opportunity Name should be visible on Account?
    
    public static void maxOpportunityOnAccount(List<Opportunity> newOppList,Map<Id,Opportunity> oldOppMap){
        /*Highest_Opportunity__c*/
        Set<Id> accIds = new Set<Id>();
        
       
            for(Opportunity opp : newOppList){
                
                if(opp.AccountId != null){
                    accIds.add(opp.AccountId);
                }
                if(oldOppMap != null && opp.Amount != oldOppMap.get(opp.Id).Amount){
                    accIds.add(opp.AccountId);
                }
            }
       
        
        if(!accIds.isEmpty()){
            List<Account> accToBeUpdated = new List<Account>();
            
			List<Opportunity> highestOpp = [SELECT Id,Name,AccountId,Amount FROM Opportunity WHERE AccountId IN :accIds AND Amount != null ORDER BY AccountId,Amount DESC];
            System.debug('accountOppMap after loop'+highestOpp);
            String oppName = highestOpp[0].Name;
            System.debug('accountOppMap after loop'+highestOpp);
            
            for(Id accId : accIds){
                Account acc = new Account();
                acc.Id = accId;
                acc.Highest_Opportunity__c = oppName;
                System.debug('Inside Loop Highest_Opportunity__c'+ acc.Highest_Opportunity__c);
                accToBeUpdated.add(acc);
            }
            System.debug('before accToBeUpdated'+accToBeUpdated);
            update accToBeUpdated;
            
        }
    }
}
